import "std/collections/vec" as V exposing { Vec }
import "std/collections/map" as M
import "std/collections/stack" exposing { Stack }
import "std/collections/queue"

fn main() {
  XXXprint 1.5
  let x = 1
  let y, z = 5
  mut u, v = 1, 4
  foo()
}

fn foo() {
  XXXprint "This is a dependency"
  main()
}

# These are examples of circular dependencies
# that should not compile.
# let x = y + 1
# let y = x - 1
# let z = z + 1
# let bar = calls_baz() - 1
# fn calls_baz() {
#   baz()
# } 
# fn baz() {
#   let barf = bar + 1
# } 
